import telebot
from telebot import types
from collections import defaultdict
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import io
import matplotlib
matplotlib.use('Agg')
import logging
import json
import os
from abc import ABC, abstractmethod

# bot @MyHobbyMy_Bot

if os.path.exists("bot.log"):
    os.remove("bot.log")

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler("bot.log"),
                              logging.StreamHandler()])

logger = logging.getLogger(__name__)


def get_hours_declension(hours):
    if hours % 10 == 1 and hours % 100 != 11:
        return f"{hours} —á–∞—Å"
    elif hours % 10 in [2, 3, 4] and hours % 100 not in [12, 13, 14]:
        return f"{hours} —á–∞—Å–∞"
    else:
        return f"{hours} —á–∞—Å–æ–≤"


class HobbyHandler(ABC):
    def __init__(self, bot):
        self.bot = bot

    @abstractmethod
    def handle_hobby(self, message):
        pass

    @abstractmethod
    def send_resources(self, message):
        pass


class Guitar(HobbyHandler):
    def handle_hobby(self, message):
        logger.info(f"Sent 'guitar' menu")
        second_mess = '–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∞–∫–∫–æ—Ä–¥, –±–æ–π –∏–ª–∏ –ø–µ—Å–Ω—é?'
        markup = types.InlineKeyboardMarkup()
        button_chords = types.InlineKeyboardButton("–ê–∫–∫–æ—Ä–¥—ã", callback_data='chords')
        markup.add(button_chords)
        button_fight = types.InlineKeyboardButton("–ë–æ–∏", callback_data='fights')
        markup.add(button_fight)
        button_songs = types.InlineKeyboardButton("–ü–µ—Å–Ω–∏", url='https://454.amdm.ru/')
        markup.add(button_songs)
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(button_back)
        self.bot.send_message(message.chat.id, second_mess, reply_markup=markup)

    def send_resources(self, message):
        if message.data == 'chords':
            self.send_chords(message)
        elif message.data == 'fights':
            self.send_fights(message)

    def send_chords(self, message):
        logger.info(f"Sent chords")
        chords_mess = ('–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã. –° –∏—Ö –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –ª—é–±—É—é –ø–µ—Å–Ω—é, '
                        '–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ‚Äì –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–ø–æ–¥–∞—Å—Ç—Ä '
                        '\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –∞–∫–∫–æ—Ä–¥—ã, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–∏–µ –∞–∫–∫–æ—Ä–¥—ã"üëá\n'+
                        '\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ —Ç–µ–æ—Ä–∏–∏ –ø—Ä–æ –∞–∫–∫–æ—Ä–¥—ã, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–µ–æ—Ä–∏—è"'+
                        '\n–ï—Å–ª–∏ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –¥–µ—Ä–∂–∏—à—å –≤ —Ä—É–∫–∞—Ö –≥–∏—Ç–∞—Ä—É, –∏ –µ—â—ë –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ —Å—Ç–∞–≤–∏—Ç—å –∞–∫–∫–æ—Ä–¥—ã, '
                        '–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∏–¥–µ–æ"')
        markup = types.InlineKeyboardMarkup()
        button_chords_link = types.InlineKeyboardButton('–î—Ä—É–≥–∏–µ –∞–∫–∫–æ—Ä–¥—ã', url='https://www.5lad.ru/applikatury/')
        markup.add(button_chords_link)
        button_chords_theory = types.InlineKeyboardButton('–¢–µ–æ—Ä–∏—è', url='https://musiconshop.ru/vidy-i-tipy-akkordov')
        markup.add(button_chords_theory)
        button_chords_video = types.InlineKeyboardButton('–í–∏–¥–µ–æ', url='https://www.youtube.com/watch?v=VahPPwUc8QI')
        markup.add(button_chords_video)
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(button_back)
        with open("pic/chords.jpg", 'rb') as chords_photo:
            self.bot.send_photo(message.chat.id, chords_photo, caption=chords_mess, reply_markup=markup)

    def send_fights(self, message):
        logger.info(f"Sent strumming patterns")
        fights_mess = ('–ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–æ–∏.'
                        '\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –±–æ–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–∏–µ –±–æ–∏"üëá'+
                        '\n–ï—Å–ª–∏ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –¥–µ—Ä–∂–∏—à—å –≤ —Ä—É–∫–∞—Ö –≥–∏—Ç–∞—Ä—É, –∏ –µ—â—ë –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –±–æ–∏, '
                        '–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∏–¥–µ–æ"')
        markup = types.InlineKeyboardMarkup()
        button_fights_link = types.InlineKeyboardButton('–î—Ä—É–≥–∏–µ –±–æ–∏', url='https://pereborom.ru/boj-na-gitare-12-vidov/')
        markup.add(button_fights_link)
        button_fights_video = types.InlineKeyboardButton('–í–∏–¥–µ–æ', url='https://www.youtube.com/watch?v=5QbeJyFHEfk')
        markup.add(button_fights_video)
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(button_back)
        with open("pic/fights.jpg", 'rb') as fights_photo:
            self.bot.send_photo(message.chat.id, fights_photo, caption=fights_mess, reply_markup=markup)


class BotMyHobby:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.user_states = {}   # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.guitar_activity_tracker = GuitarActivityTracker(self.bot)
        self.setup_handlers()

    def setup_handlers(self):
        self.bot.message_handler(commands=['start'])(self.startBot)
        self.bot.message_handler(commands=['guitar_stats'])(self.guitar_activity_tracker.send_guitar_stats)
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)
        self.bot.message_handler(func=lambda message: True)(self.handle_message)

    def startBot(self, message):
        logger.info(f"User {message.from_user.first_name} started the bot")
        first_mess = (f'<b>{message.from_user.first_name}</b>, –ø—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ö–æ–±–±–∏! –ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ, '
                      f'–º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è :)')
        markup = types.InlineKeyboardMarkup()
        button_guitar = types.InlineKeyboardButton(text='–ì–∏—Ç–∞—Ä–∞üé∏', callback_data='guitar')
        markup.add(button_guitar)
        button_stats = types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats')
        markup.add(button_stats)
        self.bot.send_message(message.chat.id, first_mess, parse_mode='html', reply_markup=markup)

    def handle_callback(self, function_call):
        if function_call.message:
            chat_id = function_call.message.chat.id
            if chat_id not in self.user_states:
                self.user_states[chat_id] = []  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if function_call.data == 'guitar':
                guitar = Guitar(self.bot)
                guitar.handle_hobby(function_call.message)
                self.user_states[chat_id].append('guitar')  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Å—Ç–µ–∫
            elif function_call.data in ['chords', 'fights']:
                guitar = Guitar(self.bot)
                guitar.send_resources(function_call)
                self.user_states[chat_id].append(function_call.data)
            elif function_call.data == 'back':
                if self.user_states[chat_id]:
                    previous_state = self.user_states[chat_id].pop()  # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å—Ç–µ–∫–∞
                    if previous_state == 'guitar':
                        self.startBot(function_call.message)  # –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                    elif previous_state in ['chords', 'fights']:
                        guitar = Guitar(self.bot)
                        guitar.handle_hobby(function_call.message)
                else:
                    self.startBot(function_call.message)  # –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, –µ—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç
            elif function_call.data == 'stats':
                self.send_stats_menu(function_call.message)
            elif function_call.data == 'mark_today':
                self.bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã –∑–∞–Ω–∏–º–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è? (—É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ)")
                self.user_states[chat_id].append('mark_today')
            elif function_call.data == 'show_stats':
                self.guitar_activity_tracker.send_guitar_stats(function_call.message)
            elif function_call.data == 'show_graph':
                self.guitar_activity_tracker.send_guitar_graph(function_call.message)
            try:
                self.bot.answer_callback_query(function_call.id)
            except telebot.apihelper.ApiTelegramException as e:
                if "query is too old" in str(e):
                    pass  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π
                else:
                    raise e  # –ø–æ–¥–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏

    def handle_message(self, message):
        logger.info(f"Message: {message.text}")
        chat_id = message.chat.id
        if chat_id in self.user_states and self.user_states[chat_id] and self.user_states[chat_id][-1] == 'mark_today':
            try:
                hours = float(message.text)
                if 0 < hours <= 24:
                    success = self.guitar_activity_tracker.track_activity(chat_id, hours)
                    if success:
                        self.bot.send_message(chat_id, f"–ó–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞: {get_hours_declension(hours)}")
                        logger.info(f"Record accepted: {get_hours_declension(hours)}")
                        self.user_states[chat_id].pop()  # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'mark_today' –∏–∑ —Å—Ç–µ–∫–∞
                    else:
                        self.bot.send_message(chat_id, "–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∑–∞ –¥–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —á–∞—Å–∞.")
                else:
                    self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ –æ—Ç 1 –¥–æ 24")
            except ValueError:
                self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤")

    def send_stats_menu(self, message):
        logger.info(f"Stats menu sent")
        markup = types.InlineKeyboardMarkup()
        button_mark_today = types.InlineKeyboardButton(text='–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ', callback_data='mark_today')
        markup.add(button_mark_today)
        button_show_stats = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='show_stats')
        markup.add(button_show_stats)
        button_show_graph = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫', callback_data='show_graph')
        markup.add(button_show_graph)
        button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(button_back)
        self.bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=markup)

    def start_polling(self):
        self.bot.infinity_polling()     # –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫–∞ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω


class GuitarActivityTracker:
    def __init__(self, bot):
        self.bot = bot
        self.guitar_activities = defaultdict(dict)  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –≥–∏—Ç–∞—Ä–æ–π
        self.load_data()

    def load_data(self):
        if os.path.exists('guitar_activities.json'):
            with open('guitar_activities.json', 'r') as file:
                try:
                    data = json.load(file)
                    if isinstance(data, dict):
                        for chat_id, activities in data.items():
                            self.guitar_activities[int(chat_id)] = {datetime.strptime(date, '%Y-%m-%d').date(): hours
                                                                    for date, hours in activities.items()}
                    else:
                        logger.error("Error loading data from guitar_activities.json. File will be overwritten.")
                        self.guitar_activities = defaultdict(dict)
                except json.JSONDecodeError:
                    logger.error("Error loading data from guitar_activities.json. File will be overwritten.")
                    self.guitar_activities = defaultdict(dict)
        else:
            with open('guitar_activities.json', 'w') as file:
                json.dump({}, file)

    def save_data(self):
        data = {str(chat_id): {date.strftime('%Y-%m-%d'): hours for date, hours in activities.items()} for
                chat_id, activities in self.guitar_activities.items()}
        with open('guitar_activities.json', 'w') as file:
            json.dump(data, file)

    def track_activity(self, chat_id, hours):
        logger.info(f"Recording activity for user {chat_id}, '{hours}'")
        today = datetime.now().date()
        if today in self.guitar_activities[chat_id]:
            current_hours = self.guitar_activities[chat_id][today]
            if current_hours + hours > 24:
                logger.info(f"Activity not recorded for user {chat_id}: total hours exceed 24")
                return False
            self.guitar_activities[chat_id][today] += hours
        else:
            self.guitar_activities[chat_id][today] = hours
        logger.info(f"Updated statistics for user {chat_id}: {self.guitar_activities[chat_id][today]}")
        self.save_data()
        return True

    def send_guitar_stats(self, message):
        logger.info(f"Sent statistics for user {message.from_user.first_name}")
        chat_id = message.chat.id
        if chat_id in self.guitar_activities:
            stats_mess = '–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π –≥–∏—Ç–∞—Ä–æ–π:\n'
            for date, hours in sorted(self.guitar_activities[chat_id].items()):
                stats_mess += f'{date}: {get_hours_declension(hours)}\n'
        else:
            stats_mess = '–í—ã –µ—â–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª–∏ —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è –≥–∏—Ç–∞—Ä–æ–π'
        self.bot.send_message(chat_id, stats_mess)

    def send_guitar_graph(self, message):
        logger.info(f"Sent statistics graph for user {message.from_user.first_name}")
        chat_id = message.chat.id
        if chat_id in self.guitar_activities:
            dates, hours = zip(*sorted(self.guitar_activities[chat_id].items()))
            plt.figure(figsize=(10, 5))
            plt.plot(dates, hours, marker='o')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ß–∞—Å—ã')
            plt.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π –≥–∏—Ç–∞—Ä–æ–π')
            plt.xticks(rotation=45)
            plt.tight_layout()

            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            self.bot.send_photo(chat_id, buf)
            plt.close()
        else:
            self.bot.send_message(chat_id, '–í—ã –µ—â–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª–∏ —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è –≥–∏—Ç–∞—Ä–æ–π')


if __name__ == "__main__":
    bot_token = '7928918563:AAG6rUHhgCWKAufgVhSjP2R-SaC1UIhfKWU'
    hobby_bot = BotMyHobby(bot_token)
    hobby_bot.start_polling()
